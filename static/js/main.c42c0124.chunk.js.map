{"version":3,"sources":["App.js","index.js"],"names":["urlrequest","queue","queueNames","getQueue","fetch","then","res","json","value","i","Object","keys","list","length","push","songId","title","columns","id","field","label","width","cellRenderer","tableManager","data","column","colIndex","rowIndex","useState","isActive","setActive","buttonState","buttonText","includes","className","onClick","name","url","part1Url","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","console","log","status","responseText","send","JSON","stringify","username","document","getElementById","window","alert","artist","bind","alttag","imgurl","setImg","useEffect","require","albumArt","album","size","err","tite","src","alt","App","rows","setRows","out","items","filter","song","active","type","placeholder","isPaginated","rootElement","ReactDOM","render"],"mappings":"4NAUIA,EACF,kEAEIC,EAAQ,GACRC,EAAa,G,SAEJC,I,qFAAf,wFACEC,MAAMJ,GACHK,MAAK,SAACC,GAAD,OAASA,EAAIC,MAAb,IACLF,MAAK,SAAUG,GACd,IAAK,IAAIC,EAAI,EAAGA,EAAIC,OAAOC,KAAKH,EAAMI,MAAMC,OAAQJ,IAClDR,EAAMa,KAAKN,EAAMI,KAAKH,GAAGM,QACzBb,EAAWY,KAAKN,EAAMI,KAAKH,GAAGO,MAEjC,IARL,4C,sBAWAb,IAEA,IA6GMc,EAAU,CACd,CACEC,GAAI,EACJC,MAAO,SACPC,MAAO,cACPC,MAAO,OAET,CACEH,GAAI,EACJC,MAAO,QACPC,MAAO,QACPC,MAAO,OAET,CACEH,GAAI,EACJE,MAAO,UACPD,MAAO,QACPG,aAxGY,SAAC,GAQX,EAPJC,aAOI,EANJf,MAMI,EALJW,MAKK,IAJLK,EAII,EAJJA,KAMA,GAFI,EAHJC,OAGI,EAFJC,SAEI,EADJC,SAG8BC,oBAAS,IAAvC,mBAAOC,EAAP,KAAiBC,EAAjB,KACIC,EAAc,sBACdC,EAAa,oBAsCjB,OApCI/B,EAAMgC,SAAST,EAAKN,KACtBc,EAAa,oBACbD,EAAc,wBAEdC,EAAa,eACbD,EAAc,iBAgCd,mCACE,wBACEG,UAAWH,EACXI,QAhCN,SAAyBC,GACvBjC,IAEA2B,GAAWD,GAEX,IAIIQ,EAAMC,mEAFGF,EAAKlB,GAEqC,WACnDqB,EAAM,IAAIC,eACdD,EAAIE,KAAK,OAAQJ,GACjBE,EAAIG,iBAAiB,SAAU,oBAC/BH,EAAIG,iBAAiB,SAAU,SAC/BH,EAAIG,iBAAiB,eAAgB,oBAErCH,EAAII,mBAAqB,WACA,IAAnBJ,EAAIK,aACNC,QAAQC,IAAIP,EAAIQ,QAChBF,QAAQC,IAAIP,EAAIS,cAEnB,EACDT,EAAIU,KACFC,KAAKC,UAAU,CAAEC,SAAUC,SAASC,eAAe,SAAS9C,SAE9D+C,OAAOC,MAAM,mBAAqBpB,EAAKqB,OAAS,MAAQrB,EAAKpB,OAC7D6B,QAAQC,IAAI7C,EACb,EAK8ByD,K,UAAWlC,GAFtC,SAIGQ,KAIR,EA6CGX,MAAO,OAET,CACEH,GAAI,EACJE,MAAO,cACPD,MAAO,KACPG,aAjDa,SAAC,GAAc,IAe1BqC,EAfcnC,EAAW,EAAXA,KAClB,EAAyBI,mBAAS,IAAlC,mBAAOgC,EAAP,KAAeC,EAAf,KAiBA,OAhBAC,qBAAU,WACSC,EAAQ,GAQzBC,CALexC,EAAKiC,OACJ,CACdQ,MAAOzC,EAAKR,MACZkD,KAAM,UAEkB,SAAUC,EAAK7D,GACvCuD,EAAOvD,EACR,GACF,GAAE,IAEHqD,EAAS,aAAenC,EAAKiC,OAAS,MAAQjC,EAAK4C,KAGjD,mCACE,qBAAKlC,UAAU,SAASmC,IAAKT,EAAQU,IAAKX,KAG/C,EA2BGtC,MAAO,OAET,CACEH,GAAI,EACJE,MAAO,aACPD,MAAO,aACPE,MAAO,QA6BIkD,EAzBH,WACV,MAAwB3C,mBAAS,IAAjC,mBAAO4C,EAAP,KAAaC,EAAb,KAOA,OANAX,qBAAU,WACR1D,MAxKF,0EAyKKC,MAAK,SAACC,GAAD,OAASA,EAAIC,MAAb,IACLF,MAAK,SAACqE,GAAD,OAASD,EAAQC,EAAIC,MAAMC,QAAO,SAACC,GAAD,OAA0B,IAAhBA,EAAKC,MAAf,IAAlC,GACT,GAAE,IAGD,qCACE,sBAAK5C,UAAU,gBAAf,UACG,IACD,uBACEA,UAAU,gBACV6C,KAAK,OACL7D,GAAG,QACHkB,KAAK,QACL4C,YAAY,gBAGhB,cAAC,IAAD,CAAW/D,QAASA,EAASuD,KAAMA,EAAMS,aAAa,MAG3D,EC/LKC,EAAc7B,SAASC,eAAe,QAC5C6B,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFF,E","file":"static/js/main.c42c0124.chunk.js","sourcesContent":["import \"./styles.css\";\nimport React from \"react\";\nimport GridTable from \"@nadavshaar/react-grid-table\";\nimport { func } from \"prop-types\";\nimport { useEffect, useState } from \"react\";\nimport styles from \"./styles.css\";\n\nlet url =\n  \"https://api.streamersonglist.com/v1/streamers/ninya_music/songs/export\";\n\nlet urlrequest =\n  \"https://api.streamersonglist.com/v1/streamers/ninya_music/queue\";\n\nconst queue = [];\nconst queueNames = [];\n\nasync function getQueue() {\n  fetch(urlrequest)\n    .then((res) => res.json())\n    .then(function (value) {\n      for (let i = 0; i < Object.keys(value.list).length; i++) {\n        queue.push(value.list[i].songId);\n        queueNames.push(value.list[i].title);\n      }\n    });\n}\n\ngetQueue();\n\nconst Song = ({\n  tableManager,\n  value,\n  field,\n  data,\n  column,\n  colIndex,\n  rowIndex\n}) => {\n  return (\n    <div\n      className=\"rgt-cell-inner\"\n      style={{ display: \"flex\", alignItems: \"center\", overflow: \"hidden\" }}\n    >\n      <img src={data.avatar} alt=\"user avatar\" />\n      <span className=\"rgt-text-truncate\" style={{ marginLeft: 10 }}>\n        {value}\n      </span>\n    </div>\n  );\n};\n\nconst TuEtwas = ({\n  tableManager,\n  value,\n  field,\n  data,\n  column,\n  colIndex,\n  rowIndex\n}) => {\n  //const [buttonText, setButtonText] = useState(\"Request Song\");\n  const [isActive, setActive] = useState(false);\n  let buttonState = \"buttonRequestfailed\";\n  let buttonText = \"Already Requested\";\n\n  if (queue.includes(data.id)) {\n    buttonText = \"Already Requested\";\n    buttonState = \"buttonRequestfailed\";\n  } else {\n    buttonText = \"Request Song\";\n    buttonState = \"buttonRequest\";\n  }\n\n  function button1Geklickt(name) {\n    getQueue();\n    //setButtonText(\"Song Reqested\");\n    setActive(!isActive);\n\n    var part1Url = \"https://api.streamersonglist.com/v1/streamers/\";\n    var streamerID = \"ninya_music\";\n    var songID = name.id;\n\n    var url = part1Url + streamerID + \"/queue/\" + songID + \"/request\";\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", url);\n    xhr.setRequestHeader(\"accept\", \"application/json\");\n    xhr.setRequestHeader(\"origin\", \"Musik\");\n    xhr.setRequestHeader(\"content-type\", \"application/json\");\n    //xhr.setRequestHeader(\"Content-Length\", \"0\");\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4) {\n        console.log(xhr.status);\n        console.log(xhr.responseText);\n      }\n    };\n    xhr.send(\n      JSON.stringify({ username: document.getElementById(\"fname\").value })\n    );\n    window.alert(\"Song requested: \" + name.artist + \" - \" + name.title);\n    console.log(queue);\n  }\n  return (\n    <>\n      <button\n        className={buttonState}\n        onClick={button1Geklickt.bind(this, data)}\n      >\n        {buttonText}\n      </button>\n    </>\n  );\n};\n\nconst AlbumArt = ({ data }) => {\n  const [imgurl, setImg] = useState([]);\n  useEffect(() => {\n    const albumArt = require(\"album-art\");\n\n    /* DEMO */\n    const artist = data.artist;\n    const options = {\n      album: data.title,\n      size: \"large\"\n    };\n    albumArt(artist, options, function (err, res) {\n      setImg(res);\n    });\n  }, []);\n  var alttag;\n  alttag = \"Cover von \" + data.artist + \" - \" + data.tite;\n\n  return (\n    <>\n      <img className=\"zoomer\" src={imgurl} alt={alttag} />\n    </>\n  );\n};\n\nconst columns = [\n  {\n    id: 1,\n    field: \"artist\",\n    label: \"KÃ¼nstler\",\n    width: \"20%\"\n  },\n  {\n    id: 2,\n    field: \"title\",\n    label: \"Titel\",\n    width: \"20%\"\n  },\n  {\n    id: 3,\n    label: \"Request\",\n    field: \"title\",\n    cellRenderer: TuEtwas,\n    width: \"20%\"\n  },\n  {\n    id: 4,\n    label: \"Album Cover\",\n    field: \"id\",\n    cellRenderer: AlbumArt,\n    width: \"10%\"\n  },\n  {\n    id: 5,\n    label: \"Attributes\",\n    field: \"attributes\",\n    width: \"20%\"\n  }\n];\n\nconst App = () => {\n  const [rows, setRows] = useState([]);\n  useEffect(() => {\n    fetch(url)\n      .then((res) => res.json())\n      .then((out) => setRows(out.items.filter((song) => song.active === true)));\n  }, []);\n\n  return (\n    <>\n      <div className=\"usernameInput\">\n        {\" \"}\n        <input\n          className=\"usernameInput\"\n          type=\"text\"\n          id=\"fname\"\n          name=\"fname\"\n          placeholder=\"Username\"\n        />\n      </div>\n      <GridTable columns={columns} rows={rows} isPaginated={true} />\n    </>\n  );\n};\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}